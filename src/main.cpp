#include <algorithm>
#include <iostream>

#include "data.h"

int yyparse();
extern int yydebug;

extern Tables db;

string space = "    ";
string String = "String";
string LocalizedString = "LocalizedString";

bool replaceAll(std::string& str, const std::string& from, const std::string& to)
{
    bool replaced = false;
    size_t start_pos = 0;
    while ((start_pos = str.find(from, start_pos)) != std::string::npos)
    {
         str.replace(start_pos, from.length(), to);
         start_pos += to.length();
         replaced = true;
    }
    return replaced;
}

string getTableName(string s)
{
    if (s[s.size() - 1] == 's')
        s = s.substr(0, s.size() - 1);
    if (s == String)
        s = LocalizedString;
    return s;
}

string removeId(string s)
{
    replaceAll(s, "_id", "");
    return s;
}

int main(int argc, char *argv[])
{
    yydebug = 0;
    int ret = yyparse();
    cout << "/* DO NOT EDIT! This is an autogenerated file. */\n\n";
    const Tables &db = ::db;
    for (auto &table : db)
    {
        string name = getTableName(table.first);
        if (name == LocalizedString)
        {
            cout << "enum class LocalizationType : EnumType" << "\n";
            cout << "{" << "\n";
            for (int i = 1; i < table.second.columns.size(); i++)
            {
                cout << space << table.second.columns[i].name << ",\n";
            }
            cout << "\n";
            cout << space << "max" << "\n";
            cout << "};" << "\n\n";
        }
        cout << "struct " << name << "\n";
        cout << "{" << "\n";
        for (auto &col : table.second.columns)
        {
            cout << space;
            auto iter = table.second.fks.find(col.name);
            if (iter != table.second.fks.end())
            {
                string name = getTableName(iter->second.table_name);
                cout << "IdPtr<" << name << "> " << removeId(col.name);
            }
            else
            {
                switch (col.type)
                {
                case ColumnType::Integer:
                    cout << "int";
                    break;
                case ColumnType::Real:
                    cout << "float";
                    break;
                case ColumnType::Text:
                    cout << "String";
                    break;
                }
                cout << " " << col.name;
            }
            cout << ";" << "\n";
        }
        if (name == "Configuration"     ||
            name == "MapBuilding"       ||
            name == "QuestReward"       ||
            name == "Modification"      ||
            name == "Clan"              ||
            name == "Save"
            )
        {
            cout << "\n";
            for (auto &table : db)
            {
                if (table.first.find(name) == 0 && isupper(table.first[name.size()]))
                {
                    string var = table.first.substr(name.size());
                    transform(var.begin(), var.end(), var.begin(), tolower);
                    cout << space << "Set<IdPtr<" << getTableName(table.first) << ">> " << var << ";" << "\n";
                }
            }
        }
        if (name == LocalizedString)
        {
            cout << "\n";
            cout << space;
            cout << "String get(int loc_id = 0) const { return ";
            cout << "((String *)&" << table.second.columns[1].name << ")[loc_id]";
            cout << "; }" << "\n";
        }
        cout << "};" << "\n\n";
    }
    return 0;
}